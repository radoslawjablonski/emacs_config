(xterm-mouse-mode 1) ;mouse mode
(defalias 'list-buffers 'ibuffer) ; make ibuffer default

;; normal shell history using arrows

(progn(require 'comint))
(define-key comint-mode-map (kbd "<up>") 'comint-previous-input)
(define-key comint-mode-map (kbd "<down>") 'comint-next-input)


;;keys
(global-set-key (kbd "C-l") 'goto-line)
(global-set-key (kbd "C-u") 'undo)
(global-set-key (kbd "C-M-b") 'compile)
(global-set-key (kbd "<f8>") 'rgrep)
(global-set-key (kbd "M-s") 'other-window) ; cursor to other pane
(add-hook 'dired-mode-hook
		  (lambda()
			(local-unset-key (kbd "M-s"))))
;; previous - next window configuration M-s M-p
(defun my-previous-window ()
  "Previous window"
  (interactive)
  (other-window -1))
(global-set-key (kbd "M-p") 'my-previous-window)

(defun transpose-buffers (arg)
  "Transpose the buffers shown in two windows."
  (interactive "p")
  (let ((selector (if (>= arg 0) 'next-window 'previous-window)))
	(while (/= arg 0)
	  (let ((this-win (window-buffer))
			(next-win (window-buffer (funcall selector))))
		(set-window-buffer (selected-window) next-win)
		(set-window-buffer (funcall selector) this-win)
		)
	  (setq arg (if (plusp arg) (1- arg) (1+ arg))))))
;; transpose two windows with each other
(global-set-key (kbd "C-x t") 'transpose-buffers)

(global-set-key (kbd "C-M-w") 'whitespace-mode)

;;mouse interaction
(global-set-key [(mouse-4)] (lambda () (interactive) (scroll-down 8)) )
(global-set-key [(mouse-5)]  (lambda () (interactive) (scroll-up 8)) )
(global-set-key [(mouse-2)] 'mouse-yank-at-click) ;middle button paste
(setq mouse-drag-copy-region t) ;copy on mouse
(load-theme 'tango-dark t)